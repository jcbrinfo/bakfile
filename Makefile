# See `README` and below.

# The name of Docker images, in order they have to be generated.
IMAGES=file_server_users file_server_data file_server_rsync file_server_duplicity file_server_gpg

USERS_IMAGE=file_server_users
DATA_IMAGE=file_server_data
RSYNC_IMAGE=file_server_rsync

# Name of the archive in `bak/` (`export` and `import`).
VOLUME_TAR=volumes.tar
# Volumes to export/import (`export` and `import`). Use absolute paths.
VOLUMES=/home
# Path of the backup directory on the host (`export` and `import`).
HOST_BAK_DIRECTORY:=bak
# Temporary path for the backup directory on the container (`export` and
# `import`).
CONTAINER_BAK_DIRECTORY=/bak

DOCKER=sudo docker


# Builds the Docker images.
.PHONY: images
images: contexts
	for i in $(IMAGES); do echo; echo "$$i:"; $(DOCKER) build -t "$$i" "contexts/$$i" || exit; done

# Builds the Docker build contexts.
.PHONY: contexts
contexts:
	mkdir -p contexts && \
	cp -rT src contexts && \
	cp -T settings/rsync-users "contexts/${USERS_IMAGE}/root/rsync-users" && \
	cp -rT settings/ssh-auth-keys "contexts/${DATA_IMAGE}/root/ssh-auth-keys" && \
	cp settings/sshd_config "contexts/${RSYNC_IMAGE}/sshd_config"

# Deletes `contexts` and remove files in `user-keys` and `bak`.
.PHONY: distclean
distclean: clean clean-bak
	rm -f user-keys/*

# Removes the files in `bak`.
.PHONY: clean-bak
clean-bak:
	rm -f bak/*

# Deletes `contexts`.
.PHONY: clean
clean:
	rm -rf contexts


# Deletes any stopped container (volumes included) that has the same name than
# a Docker image generated by this `Makefile`.
#
# WARNING: Since this target should delete the `/home` volume, `make export`
# should be run first. It also a good idea to double-check the archive generated
# by `make export`.
.PHONY: clean-ps
clean-ps:
	$(DOCKER) rm -v $(IMAGES)

# Creates a container for `file_server_data`.
.PHONY: run-data
run-data:
	$(DOCKER) run --name="${DATA_IMAGE}" "${DATA_IMAGE}"

# Runs `bash` in the `file_server_data` image.
.PHONY: debug-data
debug-data:
	$(DOCKER) run -ti -w /home --rm --volumes-from="${DATA_IMAGE}" "${DATA_IMAGE}" /bin/bash

# Runs `sshd -t` in the `file_server_rsync` image.
.PHONY: test-rsync
test-rsync:
	$(DOCKER) run --rm --volumes-from="${DATA_IMAGE}" "${RSYNC_IMAGE}" -t

# Exports `/home` as `bak/volumes.tar`.
#
# Note: The usage of backquotes (contrary to `$(…)`) force `make` to pass the
# subcommand as-is to the Bourne Shell so we can ensure that
# `"${HOST_BAK_DIRECTORY}"` exists before trying to run
# `realpath "${HOST_BAK_DIRECTORY}"`.
.PHONY: export
export:
	mkdir -p "${HOST_BAK_DIRECTORY}"
	$(DOCKER) run --rm --volumes-from="${DATA_IMAGE}" --volume="`realpath "${HOST_BAK_DIRECTORY}"`:${CONTAINER_BAK_DIRECTORY}" "${DATA_IMAGE}" /bin/tar -cf "/bak/${VOLUME_TAR}" --atime-preserve $(VOLUMES)

# Imports `/home` from `bak/volumes.tar`.
#
# Assumes that the `file_server_data` container exists.
#
# WARNING: This overwrite files without asking.
#
# Note: The usage of backquotes (contrary to `$(…)`) force `make` to pass the
# subcommand as-is to the Bourne Shell so we can ensure that
# `"${HOST_BAK_DIRECTORY}"` exists before trying to run
# `realpath "${HOST_BAK_DIRECTORY}"`.
.PHONY: import
import:
	mkdir -p "${HOST_BAK_DIRECTORY}"
	$(DOCKER) run --rm --volumes-from="${DATA_IMAGE}" --volume="`realpath "${HOST_BAK_DIRECTORY}"`:${CONTAINER_BAK_DIRECTORY}" "${DATA_IMAGE}" /bin/tar -xpf "/bak/${VOLUME_TAR}" -C / --atime-preserve --overwrite

# Ensures the backup directory exists.
.PHONY: bak-directory
bak-directory:
	mkdir -p "${HOST_BAK_DIRECTORY}"
